#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        Mo1 {
            bindings = <&sl 1>;
            key-positions = <29 30>;
        };

        cat {
            bindings = <&to 4>;
            key-positions = <5 0>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <5 4>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <31 30>;
        };

        rgbon {
            bindings = <&rgb_ug RGB_ON>;
            key-positions = <0 1 2>;
        };

        cream {
            bindings = <&rgb_ug RGB_OFF>;
            key-positions = <1 3 2>;
        };

        catoff {
            bindings = <&to 0>;
            key-positions = <27 28 29 30>;
        };

        lighting {
            bindings = <&sl 3>;
            key-positions = <2 5>;
        };

        Bluetoothsearch {
            bindings = <&bt BT_NXT>;
            key-positions = <26 13 0>;
        };
    };

    macros {
        Move: Move {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp O &kp V &kp E &kp ENTER>;
            label = "MOVE";
        };

        Rotate: Rotate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp O &kp T &kp A &kp T &kp E &kp RET>;
            label = "ROTATE";
        };

        Scale: Scale {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp C &kp A &kp L &kp E &kp RET>;
            label = "SCALE";
        };

        Copy: Copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp P &kp Y &kp RET>;
            label = "COPY";
        };

        scale1d: scale1d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp C &kp A &kp L &kp E &kp N1 &kp D &kp RET>;
            label = "SCALE1D";
        };

        Mirror: Mirror {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp I &kp R &kp R &kp O &kp R &kp RET>;
            label = "MIRROR";
        };

        Join: Join {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp J &kp O &kp I &kp N &kp RET>;
            label = "JOIN";
        };

        Offset: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp F &kp F &kp S &kp E &kp T &kp RET>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        generic {
            bindings = <
&kp ESC     &kp N1          &kp N2           &kp N3     &kp N4    &kp N5              &kp UP_ARROW     &kp N6         &kp N7     &kp N8        &kp N9          &kp N0    &kp EQUAL
&kp TAB     &kp Q           &kp W            &kp E      &kp R     &kp T               &kp DOWN_ARROW   &kp Y          &kp U      &kp I         &kp O           &kp P     &kp SINGLE_QUOTE
&kp CAPS    &kp A           &kp S            &kp D      &kp F     &kp G               &kp LEFT_ARROW   &kp H          &kp J      &kp K         &kp L           &kp SEMI  &kp ENTER
&kp LSHFT   &kp Z           &kp X            &kp C      &kp V     &kp B               &kp RIGHT_ARROW  &kp N          &kp M      &kp COMMA     &kp DOT         &kp FSLH  &kp MINUS
&kp C_MUTE  &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp ENTER  &kp LALT  &kp LEFT_CONTROL    &kp ENTER        &kp BACKSPACE  &kp SPACE  &kp UP_ARROW  &kp DOWN_ARROW  &to 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Generic";
        };

        modeling {
            bindings = <
&kp TILDE   &Move      &Rotate  &Scale   &Copy                     &scale1d                     &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&none       &Mirror    &Join    &Offset  &none                     &kp I                        &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&none       &kp TILDE  &none    &none    &none                     &kp RG(LS(S))                &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&none       &none      &none    &none    &kp LS(LC(LEFT_BRACKET))  &kp LC(LS(RIGHT_BRACKET))    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans     &trans   &trans   &trans                    &trans                       &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "Modeling";
            sensor-bindings = <&scroll_encoder>;
        };

        gaming {
            bindings = <
&kp ESC           &kp N1        &kp N2        &kp N3        &kp N4        &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8                             &kp N9           &kp N0    &kp EQUAL
&kp TAB           &kp Q         &kp W         &kp E         &kp R         &kp T        &kp DOWN_ARROW   &kp Y      &kp U      &kp I                              &kp O            &kp P     &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp A         &kp S         &kp D         &kp F         &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K                              &kp L            &kp SEMI  &kp ENTER
&kp LEFT_CONTROL  &kp Z         &kp X         &kp C         &kp V         &kp B        &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA                          &kp DOT          &kp FSLH  &kp MINUS
&kp C_MUTE        &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp SPACE    &kp ENTER        &kp SPACE  &kp ENTER  &rgb_ug RGB_COLOR_HSB(328,100,50)  &kp RIGHT_SHIFT  &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Gaming";
        };

        Lighting {
            bindings = <
&none  &kp LA(LC(NUMBER_0))  &kp LA(LC(NUMBER_9))  &none            &none            &none             &none  &none  &none  &none  &none  &none  &none
&none  &kp LA(LC(F6))        &kp LA(LC(F12))       &kp LA(LC(F11))  &kp LA(LC(F10))  &kp LA(LC(F7))    &none  &none  &none  &none  &none  &none  &none
&none  &kp LA(LC(F2))        &kp LA(LC(F4))        &kp LC(LA(F1))   &none            &none             &none  &none  &none  &none  &none  &none  &none
&none  &none                 &none                 &none            &none            &none             &none  &none  &none  &none  &none  &none  &none
&none  &none                 &none                 &none            &none            &none             &none  &none  &none  &none  &none  &none
            >;
        };

        cat {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
